//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `banner.json`.
    static let bannerJson = Rswift.FileResource(bundle: R.hostingBundle, name: "banner", pathExtension: "json")
    /// Resource file `feed.json`.
    static let feedJson = Rswift.FileResource(bundle: R.hostingBundle, name: "feed", pathExtension: "json")
    /// Resource file `feeds.json`.
    static let feedsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "feeds", pathExtension: "json")
    /// Resource file `game.json`.
    static let gameJson = Rswift.FileResource(bundle: R.hostingBundle, name: "game", pathExtension: "json")
    /// Resource file `getUser.json`.
    static let getUserJson = Rswift.FileResource(bundle: R.hostingBundle, name: "getUser", pathExtension: "json")
    /// Resource file `iconfont.ttf`.
    static let iconfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "iconfont", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "banner", withExtension: "json")`
    static func bannerJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bannerJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "feed", withExtension: "json")`
    static func feedJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.feedJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "feeds", withExtension: "json")`
    static func feedsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.feedsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "game", withExtension: "json")`
    static func gameJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gameJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "getUser", withExtension: "json")`
    static func getUserJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getUserJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "iconfont", withExtension: "ttf")`
    static func iconfontTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iconfontTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `iconfont`.
    static let iconfont = Rswift.FontResource(fontName: "iconfont")
    
    /// `UIFont(name: "iconfont", size: ...)`
    static func iconfont(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: iconfont, size: size)
    }
    
    static func validate() throws {
      if R.font.iconfont(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'iconfont' could not be loaded, is 'iconfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `add_purpose`.
    static let add_purpose = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_purpose")
    /// Image `banner_gray_mask`.
    static let banner_gray_mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_gray_mask")
    /// Image `ic_recommond`.
    static let ic_recommond = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_recommond")
    /// Image `icon_firefly`.
    static let icon_firefly = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_firefly")
    /// Image `load0`.
    static let load0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load0")
    /// Image `load10`.
    static let load10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load10")
    /// Image `load1`.
    static let load1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load1")
    /// Image `load2`.
    static let load2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load2")
    /// Image `load3`.
    static let load3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load3")
    /// Image `load4`.
    static let load4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load4")
    /// Image `load5`.
    static let load5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load5")
    /// Image `load6`.
    static let load6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load6")
    /// Image `load7`.
    static let load7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load7")
    /// Image `load8`.
    static let load8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load8")
    /// Image `load9`.
    static let load9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "load9")
    /// Image `timeline_card_bottom_background_highlighted`.
    static let timeline_card_bottom_background_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_card_bottom_background_highlighted")
    /// Image `timeline_card_bottom_background_normal`.
    static let timeline_card_bottom_background_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_card_bottom_background_normal")
    /// Image `timeline_icon_comment`.
    static let timeline_icon_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_icon_comment")
    /// Image `timeline_icon_retweet`.
    static let timeline_icon_retweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_icon_retweet")
    /// Image `timeline_icon_unlike`.
    static let timeline_icon_unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_icon_unlike")
    
    /// `UIImage(named: "add_purpose", bundle: ..., traitCollection: ...)`
    static func add_purpose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_purpose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "banner_gray_mask", bundle: ..., traitCollection: ...)`
    static func banner_gray_mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_gray_mask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_recommond", bundle: ..., traitCollection: ...)`
    static func ic_recommond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_recommond, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_firefly", bundle: ..., traitCollection: ...)`
    static func icon_firefly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_firefly, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load0", bundle: ..., traitCollection: ...)`
    static func load0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load1", bundle: ..., traitCollection: ...)`
    static func load1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load10", bundle: ..., traitCollection: ...)`
    static func load10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load2", bundle: ..., traitCollection: ...)`
    static func load2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load3", bundle: ..., traitCollection: ...)`
    static func load3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load4", bundle: ..., traitCollection: ...)`
    static func load4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load5", bundle: ..., traitCollection: ...)`
    static func load5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load6", bundle: ..., traitCollection: ...)`
    static func load6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load7", bundle: ..., traitCollection: ...)`
    static func load7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load8", bundle: ..., traitCollection: ...)`
    static func load8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "load9", bundle: ..., traitCollection: ...)`
    static func load9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_card_bottom_background_highlighted", bundle: ..., traitCollection: ...)`
    static func timeline_card_bottom_background_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_card_bottom_background_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_card_bottom_background_normal", bundle: ..., traitCollection: ...)`
    static func timeline_card_bottom_background_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_card_bottom_background_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_icon_comment", bundle: ..., traitCollection: ...)`
    static func timeline_icon_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_icon_comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_icon_retweet", bundle: ..., traitCollection: ...)`
    static func timeline_icon_retweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_icon_retweet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_icon_unlike", bundle: ..., traitCollection: ...)`
    static func timeline_icon_unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_icon_unlike, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `AddGameCollectionCell`.
    static let addGameCollectionCell = _R.nib._AddGameCollectionCell()
    /// Nib `DefaultTableEmptyView`.
    static let defaultTableEmptyView = _R.nib._DefaultTableEmptyView()
    /// Nib `DefaultTableErrorView`.
    static let defaultTableErrorView = _R.nib._DefaultTableErrorView()
    /// Nib `DefaultTableLoadView`.
    static let defaultTableLoadView = _R.nib._DefaultTableLoadView()
    /// Nib `FeedArticleCell`.
    static let feedArticleCell = _R.nib._FeedArticleCell()
    /// Nib `GameCell`.
    static let gameCell = _R.nib._GameCell()
    /// Nib `GameCollectionCell`.
    static let gameCollectionCell = _R.nib._GameCollectionCell()
    /// Nib `GameCollectionHeaderCell`.
    static let gameCollectionHeaderCell = _R.nib._GameCollectionHeaderCell()
    /// Nib `TableDemoVC`.
    static let tableDemoVC = _R.nib._TableDemoVC()
    /// Nib `UserStyleLoadView`.
    static let userStyleLoadView = _R.nib._UserStyleLoadView()
    
    /// `UINib(name: "AddGameCollectionCell", in: bundle)`
    static func addGameCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addGameCollectionCell)
    }
    
    /// `UINib(name: "DefaultTableEmptyView", in: bundle)`
    static func defaultTableEmptyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.defaultTableEmptyView)
    }
    
    /// `UINib(name: "DefaultTableErrorView", in: bundle)`
    static func defaultTableErrorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.defaultTableErrorView)
    }
    
    /// `UINib(name: "DefaultTableLoadView", in: bundle)`
    static func defaultTableLoadView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.defaultTableLoadView)
    }
    
    /// `UINib(name: "FeedArticleCell", in: bundle)`
    static func feedArticleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feedArticleCell)
    }
    
    /// `UINib(name: "GameCell", in: bundle)`
    static func gameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameCell)
    }
    
    /// `UINib(name: "GameCollectionCell", in: bundle)`
    static func gameCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameCollectionCell)
    }
    
    /// `UINib(name: "GameCollectionHeaderCell", in: bundle)`
    static func gameCollectionHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameCollectionHeaderCell)
    }
    
    /// `UINib(name: "TableDemoVC", in: bundle)`
    static func tableDemoVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tableDemoVC)
    }
    
    /// `UINib(name: "UserStyleLoadView", in: bundle)`
    static func userStyleLoadView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userStyleLoadView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddGameCollectionCell.validate()
      try _UserStyleLoadView.validate()
      try _DefaultTableLoadView.validate()
    }
    
    struct _AddGameCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddGameCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddGameCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddGameCollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add_purpose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_purpose' is used in nib 'AddGameCollectionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DefaultTableEmptyView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DefaultTableEmptyView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DefaultTableEmptyView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DefaultTableEmptyView
      }
      
      fileprivate init() {}
    }
    
    struct _DefaultTableErrorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DefaultTableErrorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DefaultTableErrorView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DefaultTableErrorView
      }
      
      fileprivate init() {}
    }
    
    struct _DefaultTableLoadView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DefaultTableLoadView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DefaultTableLoadView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DefaultTableLoadView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "load0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'load0' is used in nib 'DefaultTableLoadView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FeedArticleCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FeedArticleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FeedArticleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedArticleCell
      }
      
      fileprivate init() {}
    }
    
    struct _GameCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameCell
      }
      
      fileprivate init() {}
    }
    
    struct _GameCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GameCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _GameCollectionHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameCollectionHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GameCollectionHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameCollectionHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _TableDemoVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TableDemoVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UserStyleLoadView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserStyleLoadView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserStyleLoadView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserStyleLoadView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "load0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'load0' is used in nib 'UserStyleLoadView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
